// roll class and constructor
class Roll {
    constructor(rollType, rollGlazing, packSize, basePrice) {
        this.type = rollType;
        this.glazing = rollGlazing;
        this.size = packSize;
        this.basePrice = basePrice;
    }
}

// these dictionaries, packPrices and glazePrices, are used to streamline price adaptations based on user selection
const packPrices = {
    1  : 1,
    3  : 3,
    6  : 5,
    12 : 10
}

const glazePrices = {
    "Keep original"     : 0,
    "Sugar Milk"        : 0,
    "Vanilla Milk"      : 0.50,
    "Double Chocolate"  : 1.50
}

// initializing an empty cart array
let cart = [];

// checks to see if local storage is empty or not
// IF local storage contains information on roll instances, then retrieve that data and push it into the initialized cart
if (localStorage.getItem('storedRolls') != null) {

    console.log("Note: Local storage contains cart items. Retrieving cart from storage.")
    
    // use JSON and parsing to extract roll instances from info stored in local storage
    const cartArrayString = localStorage.getItem('storedRolls');
    const cartArrayParsed = JSON.parse(cartArrayString);
    
    // push each cart item into the cart array
    for (parsedItem of cartArrayParsed) {
        cart.push(parsedItem)
    }
} // OTHERWISE, just use an empty cart. I also wanted to console log whether the user is beginning with a new cart or not
else {

    console.log("Note: No cart items found in local storage on page load. User starts with an empty cart")
}

// initialize the final cart from the current saved cart and a total price variable
let finalCart = cart;
let totalPrice = 0;

// this function calculates the final price by iterating through the cart item prices and adds them together
function totalPriceCalc() {
    totalPrice = 0;

    //iterates through cart
    for (items of finalCart) {
        // does the math
        totalPrice += (items.basePrice + glazePrices[items.glazing]) * packPrices[items.size];
    }
    // rewrites the total price
    document.querySelector("#cartTotal").innerHTML = "$ " + totalPrice.toFixed(2);
}

function updateLocalStorage() {
    // first want to clear storage and then resave it based off of the current cart
    localStorage.clear()

    //stringify cart and then save it to local storage
    const cartArrayString = JSON.stringify(cart);
    localStorage.setItem("storedRolls", cartArrayString);
    
    console.log(cart)
}

// this function deletes the template element and the cart item from the set. Then, it recalculates the final price and prints it
function deleteItem(element, cartItem) {

    // remove the item from the DOM
    element.remove();

    // this removes the element from the cart array by finding its index and then splicing it
    for (removeIndex in cart) {
        if (cartItem == cart[removeIndex]) {
            finalCart.splice(removeIndex, 1);
        }
    }

    // update local storage and calculate the final price
    updateLocalStorage()
    totalPriceCalc()
}

// this function creates the template elements
function createElement(cartItem) {

    // creates template, clone, and cart element
    const template = document.querySelector('#cartItem-template');
    let clone = template.content.cloneNode(true);
    let cartElement = clone.querySelector(".cartItem")

    // deletes the cart element when "remove" is clicked (does so by calling the deleteItem function)
    const btnDelete = cartElement.querySelector(".remove");
    btnDelete.addEventListener('click', () => {
        deleteItem(cartElement, cartItem);
    });

    // parent list that holds all template elements
    let cartListElement = document.querySelector('#cartItemList');

    // variables to be written in for each element
    let elementImage = "./assets/products/" + rolls[cartItem.type].imageFile;
    let elementName = cartItem.type;
    let elementGlaze = cartItem.glazing;
    let elementQuant = cartItem.size;
    let elementPrice = (cartItem.basePrice + glazePrices[cartItem.glazing]) * packPrices[cartItem.size];

    // this section populates the template with each item's specifications (image, type, glaze, pack, & price)
    cartElement.querySelector("#image-template").src = elementImage;
    cartElement.querySelector("#text-template").innerHTML = elementName + " Cinnamon Roll<br>" + "Glazing: "
                                                          + elementGlaze + "<br>Pack Size: " + elementQuant;
    cartElement.querySelector("#itemPrices").innerHTML = "$ " + elementPrice.toFixed(2);

    // appends elements to the list element
    cartListElement.append(cartElement);
}

// this loop does all the magic, it is what creates, updates, and loads everything on the DOM
for (item of finalCart) {
    createElement(item)
}

// finally, calculate the final price (this is mostly used on page load and gets modifed after removing elements)
totalPriceCalc()
